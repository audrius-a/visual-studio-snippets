<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>xUnit Async Theory Test Method</Title>
      <Shortcut>theory</Shortcut>
      <Description>Code snippet for a xUnit async test method with [Theory] attribute</Description>
      <Author>Audrius Asadauskas</Author>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
          <Namespace>Xunit</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>methodName</ID>
          <ToolTip>Replace with the name of method to be tested</ToolTip>
          <Default>MyTestMethod</Default>
        </Literal>
        <Literal>
          <ID>should</ID>
          <ToolTip>Replace with the behaviour to be tested</ToolTip>
          <Default>ShouldReturnValue</Default>
        </Literal>
        <Literal>
          <ID>when</ID>
          <ToolTip>Replace with the condition to be tested</ToolTip>
          <Default>WhenValidParameterIsGiven</Default>
        </Literal>
        <Literal>
          <ID>dataParameter</ID>
          <ToolTip>Replace with the parameter name to be passed in</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>dataValue</ID>
          <ToolTip>Replace with the value to be tested</ToolTip>
          <Default>1</Default>
        </Literal>
        <Literal Editable="false">
          <ID>Theory</ID>
          <Function>SimpleTypeName(global::Xunit.Theory)</Function>
        </Literal>
        <Literal Editable="false">
          <ID>InlineData</ID>
          <Function>SimpleTypeName(global::Xunit.InlineData)</Function>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[[$Theory$][$InlineData$($dataValue$)]
      public void $methodName$_$should$_$when$(int $dataParameter$)
      {
          // Arrange
          $end$

          // Act

          // Assert
      }]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>